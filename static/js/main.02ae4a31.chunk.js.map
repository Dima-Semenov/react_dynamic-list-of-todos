{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api.js","App.jsx","index.js"],"names":["TodoList","state","title","selectedTodos","handleChange","event","target","name","value","setState","this","props","todos","changeCheked","selectedUserId","newTodos","filter","item","toLocaleLowerCase","includes","completed","className","type","onChange","map","key","id","checked","readOnly","onClick","userId","React","Component","CurrentUser","user","loadDate","prevProps","fetch","then","response","json","data","email","phone","reset","App","handleChangeCheked","prevState","result","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.02ae4a31.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    title: '',\n    selectedTodos: 'All',\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { todos, changeCheked, selectedUserId } = this.props;\n    const { title, selectedTodos } = this.state;\n\n    const newTodos = todos.filter(item => (\n      item.title.toLocaleLowerCase().includes(title.toLocaleLowerCase())\n    )).filter((item) => {\n      switch (selectedTodos) {\n        case 'Active':\n          return !item.completed;\n        case 'Completed':\n          return item.completed;\n        default:\n          return item;\n      }\n    });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <label>\n          Search by title:\n          {' '}\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={title}\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <select\n          name=\"selectedTodos\"\n          value={selectedTodos}\n          onChange={this.handleChange}\n        >\n          <option>All</option>\n          <option>Completed</option>\n          <option>Active</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {newTodos.map(item => (\n              <li\n                key={item.id}\n                className={`TodoList__item ${item.completed\n                  ? 'TodoList__item--checked'\n                  : 'TodoList__item--unchecked'}\n                `}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={item.completed}\n                    onChange={() => {\n                      changeCheked(item.id);\n                    }}\n                    readOnly\n                  />\n                  <p>{item.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => {\n                    selectedUserId(item.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {item.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n  })).isRequired,\n  changeCheked: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadDate();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadDate();\n    }\n  }\n\n  async loadDate() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user: user.data });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <p>Loading...</p>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {' '}\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          type=\"button\"\n          onClick={() => {\n            this.props.reset();\n          }}\n        >\n          Reset\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  reset: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","const API_URL = 'https://mate-api.herokuapp.com/todos';\nconst USER_URL = 'https://mate-api.herokuapp.com/users/';\n\nexport function getAll() {\n  return fetch(API_URL)\n    .then(response => response.json());\n}\n\nexport function getUser(userId) {\n  return fetch(`${USER_URL}${userId}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAll } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getAll()\n      .then((response) => {\n        const result = response.data.filter(item => (\n          item.title !== null\n        ));\n\n        this.setState({\n          todos: result,\n        });\n      });\n  }\n\n  handleChangeCheked = (userId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((item) => {\n        if (item.id !== userId) {\n          return item;\n        }\n\n        return {\n          ...item,\n          completed: !item.completed,\n        };\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            changeCheked={this.handleChangeCheked}\n            selectedUserId={(userId) => {\n              this.setState({ selectedUserId: userId });\n            }}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n\n            {selectedUserId !== 0 ? (\n              <CurrentUser\n                userId={selectedUserId}\n                reset={() => {\n                  this.setState({ selectedUserId: 0 });\n                }}\n              />\n            ) : (\n              <p>Please select user</p>\n            )}\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}