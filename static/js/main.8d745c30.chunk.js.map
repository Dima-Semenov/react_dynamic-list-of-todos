{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api.js","App.jsx","index.js"],"names":["TodoList","todos","changeCheked","selectedUserId","handleChange","className","type","name","onChange","value","map","item","key","id","completed","checked","readOnly","title","onClick","userId","CurrentUser","state","user","this","loadUser","prevProps","props","fetch","then","response","json","setState","data","email","phone","reset","React","Component","App","query","statusFilter","checkTodo","prevState","event","target","result","filter","todo","newTodos","toLocaleLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8d745c30.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({\n  todos,\n  changeCheked,\n  selectedUserId,\n  handleChange,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <label>\n      Search by title:\n      {' '}\n      <input\n        type=\"text\"\n        name=\"query\"\n        onChange={handleChange}\n      />\n    </label>\n\n    <select\n      name=\"statusFilter\"\n      onChange={handleChange}\n    >\n      <option value=\"All\">All</option>\n      <option value=\"Completed\">Completed</option>\n      <option value=\"Active\">Active</option>\n    </select>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(item => (\n          <li\n            key={item.id}\n            className={`TodoList__item ${item.completed\n              ? 'TodoList__item--checked'\n              : 'TodoList__item--unchecked'}\n            `}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={item.completed}\n                onChange={() => {\n                  changeCheked(item.id);\n                }}\n                readOnly\n              />\n              <p>{item.title}</p>\n            </label>\n\n            <button\n              className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n              type=\"button\"\n              onClick={() => {\n                selectedUserId(item.userId);\n              }}\n            >\n              User&nbsp;#\n              {item.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n  })).isRequired,\n  changeCheked: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user: user.data });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <p>Loading...</p>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {' '}\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          type=\"button\"\n          onClick={() => {\n            this.props.reset();\n          }}\n        >\n          Reset\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  reset: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","const API_URL = 'https://mate-api.herokuapp.com/todos';\nconst USER_URL = 'https://mate-api.herokuapp.com/users/';\n\nexport function getAll() {\n  return fetch(API_URL)\n    .then(response => response.json());\n}\n\nexport function getUser(userId) {\n  return fetch(`${USER_URL}${userId}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAll } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    query: '',\n    statusFilter: 'All',\n  };\n\n  componentDidMount() {\n    getAll()\n      .then((result) => {\n        this.setState({\n          todos: result.data.filter(todo => todo.title),\n        });\n      });\n  }\n\n  checkTodo = (userId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((item) => {\n        if (item.id !== userId) {\n          return item;\n        }\n\n        return {\n          ...item,\n          completed: !item.completed,\n        };\n      }),\n    }));\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId, query, statusFilter } = this.state;\n\n    const filterByQuery = todo => (\n      todo.title.toLocaleLowerCase().includes(query.toLocaleLowerCase())\n    );\n\n    const filterByStatus = (item) => {\n      switch (statusFilter) {\n        case 'Active':\n          return !item.completed;\n        case 'Completed':\n          return item.completed;\n        default:\n          return item;\n      }\n    };\n\n    const newTodos = todos.filter(filterByQuery).filter(filterByStatus);\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={newTodos}\n            changeCheked={this.checkTodo}\n            handleChange={this.handleChange}\n            selectedUserId={(userId) => {\n              this.setState({ selectedUserId: userId });\n            }}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n\n            {selectedUserId !== 0 ? (\n              <CurrentUser\n                userId={selectedUserId}\n                reset={() => {\n                  this.setState({ selectedUserId: 0 });\n                }}\n              />\n            ) : (\n              <p>Please select user</p>\n            )}\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}